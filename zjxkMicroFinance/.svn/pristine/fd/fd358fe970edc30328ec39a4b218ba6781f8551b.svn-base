package com.yzframework.utils;

import java.security.MessageDigest;
import java.util.Random;

public class PasswordUtil {

	// 十六进制下数字到字符的映射数组
	private final static String[] hexDigits = { "y", "z", "f", "r", "m", "e",
			"w", "o", "r", "k", "5", "5", "6", "6", "8", "8" };
	
	private final static char[] passworditems = {'a','b','c','d','e','f','g',
	        'h','i','h','k','m','m','n','o','p','q','r','s','t','u','v','w',
	        'x','y','z','A','B','C','D','E','F','G','H','I','H','K','M','M',
	        'N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};

	/** * 加密 */
	public static String encryPassword(String inputString) throws Exception {
		return encodeByMD5(inputString);
	}

	/**
	 * 验证输入是否正确
	 * 
	 * @param password
	 *            加密后的密码
	 * @param inputString
	 *            输入的字符串
	 * @return 验证结果，TRUE:正确 FALSE:错误
	 */
	public static boolean validatePassword(String password, String inputString) throws Exception {
		if (password.equals(encodeByMD5(inputString))) {
			return true;
		} else {
			return false;
		}
	}
	
	public static String randomPassword(int length){
	    StringBuilder sb = new StringBuilder();
	    Random r = new Random();
	    int i=0;
	    while(i++ < length){
	        int idx = Math.abs(r.nextInt(passworditems.length));
	        sb.append(passworditems[idx]);
	    }
	    
	    return sb.toString();
	}

	/** 对字符串进行MD5加密 */
	private static String encodeByMD5(String originString) throws Exception {
		if (originString != null) {
			try {
				// 创建具有指定算法名称的信息摘要
				MessageDigest md = MessageDigest.getInstance("MD5");
				// 使用指定的字节数组对摘要进行最后更新，然后完成摘要计算
				byte[] results = md.digest(originString.getBytes());
				// 将得到的字节数组变成字符串返回
				String resultString = byteArrayToHexString(results);
				return resultString.toUpperCase();
			} catch (Exception ex) {
				throw new Exception(ex);
			}
		}
		return null;
	}

	/**
	 * 转换字节数组为十六进制字符串
	 * 
	 * @param 字节数组
	 * @return 十六进制字符串
	 */
	private static String byteArrayToHexString(byte[] b) {
		StringBuffer resultSb = new StringBuffer();
		for (int i = 0; i < b.length; i++) {
			resultSb.append(byteToHexString(b[i]));
		}
		return resultSb.toString();
	}

	/** 将一个字节转化成十六进制形式的字符串 */
	private static String byteToHexString(byte b) {
		int n = b;
		if (n < 0)
			n = 256 + n;
		int d1 = n / 16;
		int d2 = n % 16;
		return hexDigits[d1] + hexDigits[d2];
	}

}
