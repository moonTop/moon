package com.yzframework.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.drools.KnowledgeBase;
import org.drools.definition.process.Connection;
import org.drools.definition.process.Node;
import org.drools.definition.process.Process;
import org.drools.runtime.StatefulKnowledgeSession;
import org.drools.runtime.process.NodeInstance;
import org.drools.runtime.process.ProcessInstance;
import org.jbpm.ruleflow.core.RuleFlowProcess;
import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;
import org.jbpm.task.Comment;
import org.jbpm.task.Status;
import org.jbpm.task.Task;
import org.jbpm.task.User;
import org.jbpm.task.query.TaskSummary;
import org.jbpm.task.service.local.LocalTaskService;
import org.jbpm.workflow.instance.WorkflowProcessInstance;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSON;
import com.yzframework.base.Page;
import com.yzframework.service.JbpmService;

@Controller
@RequestMapping("/views/Task")
public class TaskController {

	protected final Log logger = LogFactory.getLog(getClass());
	
	@Resource
	private KnowledgeBase kbase;

    @Resource
    private StatefulKnowledgeSession ksession;
    
	@Resource
	private LocalTaskService taskService;
	
	@Resource
	private JbpmService jbpmService;

	@RequestMapping("/todoList")
	public ModelAndView todoList(Page page, HttpSession session) {

		String currentUser = (String) session.getAttribute("CURRENT_USER");
		ModelAndView mav = new ModelAndView();

		Page p = new Page();

		List<TaskSummary> tasks = taskService.getTasksAssignedAsPotentialOwner(currentUser, "en-UK");
		
		List<TaskSummary> todoList = new ArrayList<TaskSummary>();
		for (TaskSummary taskSummary : tasks) {
			User actualOwner = taskSummary.getActualOwner();
			if (actualOwner == null || StringUtils.isEmpty(actualOwner.getId())) {
				todoList.add(taskSummary);
			} else if(currentUser.equals(actualOwner.getId())){
				todoList.add(taskSummary);
			}
		}
		
		p.setNumPerPage(page.getNumPerPage());
		p.setTotalCount(new Long(todoList.size()));
		p.setPageNum(page.getPageNum());

		mav.addObject("page", p);
		mav.addObject("tasks", todoList);

		mav.setViewName("todoList");

		return mav;
	}
	
	@RequestMapping("/doneList")
	public ModelAndView doneList(Page page, HttpSession session) {

		String currentUser = (String) session.getAttribute("CURRENT_USER");
		ModelAndView mav = new ModelAndView();

		Page p = new Page();
        List<Status> statusList = new ArrayList<Status>();
        statusList.add(Status.Completed);
		List<TaskSummary> tasks = taskService.getTasksOwned(currentUser, statusList, "en-UK");

		p.setNumPerPage(page.getNumPerPage());
		p.setTotalCount(new Long(tasks.size()));
		p.setPageNum(page.getPageNum());

		mav.addObject("page", p);
		mav.addObject("tasks", tasks);

		mav.setViewName("doneList");

		return mav;
	}
	
	@RequestMapping("/viewflow/{taskId}")
	public ModelAndView viewflow(@PathVariable String taskId) {

		ModelAndView mav = new ModelAndView();

		Task task = taskService.getTask(Long.parseLong(taskId));
		
		long processInstanceId = task.getTaskData().getProcessInstanceId();
		String processId = task.getTaskData().getProcessId();
		
		Process process = kbase.getProcess(processId);
		RuleFlowProcess ruleFlowProcess = (RuleFlowProcess)process;
		
		ProcessInstance processInstance = ksession.getProcessInstance(processInstanceId);
		
		// 所有节点
		List<Node> nodes = Arrays.asList(ruleFlowProcess.getNodes());
		List<Connection> connections = new ArrayList<Connection>();
		// 节点连线
		for (Node node : nodes) {
			connections.addAll(node.getOutgoingConnections("DROOLS_DEFAULT"));
		}
		// 当前节点
		List<Node> currentNodes = new ArrayList<Node>();
		if (processInstance != null){
			RuleFlowProcessInstance ruleFlowProcessInstance = (RuleFlowProcessInstance)processInstance;
			Collection<NodeInstance> nodeInstances = ruleFlowProcessInstance.getNodeInstances();
			for(NodeInstance nodeInstance : nodeInstances){
				 long nodeId = nodeInstance.getId();
				 currentNodes.add(ruleFlowProcess.getNode(nodeId));
			}
		}
		
		mav.addObject("allNodes", nodes);
		mav.addObject("connections", connections);
		mav.addObject("currentNodes", currentNodes);
		mav.setViewName("showProcess");

		return mav;
	}
	
	@RequestMapping("/viewdone/{taskId}")
	public ModelAndView viewdone(@PathVariable String taskId) {
		Task task = taskService.getTask(Long.parseLong(taskId));
		long processInstanceId = task.getTaskData().getProcessInstanceId();
		String processId = task.getTaskData().getProcessId();
		// 取得action
		String action = jbpmService.findAction(processId, "show");
		String businessId = jbpmService.findBusinessId(processId, processInstanceId);
		
		String redirectURI = "redirect:"+ action +"/"+taskId+"/"+businessId+".do";
		
		ModelAndView mav = new ModelAndView(redirectURI);

		return mav;
	}
	
	@RequestMapping("/approval/{taskId}")
	public ModelAndView approval(@PathVariable String taskId) {
		
		Task task = taskService.getTask(Long.parseLong(taskId));
		long processInstanceId = task.getTaskData().getProcessInstanceId();
		ProcessInstance processInstance = ksession.getProcessInstance(processInstanceId);
		WorkflowProcessInstance wkProcessInstance = (WorkflowProcessInstance)processInstance;
		String businessId = (String)wkProcessInstance.getVariable("businessId");
		
		String processId = task.getTaskData().getProcessId();
		// 取得action
		String action = jbpmService.findAction(processId, "edit");
		
		String redirectURI = "redirect:"+ action +"/"+taskId+"/"+businessId+".do";
		
		ModelAndView mav = new ModelAndView(redirectURI);
		
		return mav;
	}
	
	@RequestMapping("/commentList")
	@ResponseBody
	public String commentList(String taskId) {
		if (StringUtils.isEmpty(taskId)) {
			return "";
		}
		List<Comment> commentList = new ArrayList<Comment>();
		
		Task task = taskService.getTask(Long.parseLong(taskId));
		long processInstanceId = task.getTaskData().getProcessInstanceId();

        List<Status> statusList = new ArrayList<Status>();
        statusList.add(Status.Completed);
		List<TaskSummary> taskSummaryList = taskService.getTasksByStatusByProcessId(processInstanceId, statusList, "en-UK");
		
		for (TaskSummary taskSummary : taskSummaryList) {
			long localTaskId = taskSummary.getId();
			if (localTaskId <= Long.parseLong(taskId)) {
				Task localTask = taskService.getTask(localTaskId);
				List<Comment> comments = localTask.getTaskData().getComments();
				
				commentList.addAll(comments);
			}
		}
		
		return JSON.toJSONString(commentList);
	}

}
